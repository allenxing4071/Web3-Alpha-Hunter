# Cursor AI Rules for Figma to Code Workflow

## 项目信息
- 项目名: Web3 Alpha Hunter (发现机会)
- 技术栈: Next.js 14 + React + TypeScript + Tailwind CSS
- UI 组件库: shadcn/ui
- 后端: FastAPI + PostgreSQL

## Figma 设计转代码规则

### 1. 代码风格
- 使用 TypeScript (严格模式)
- React 函数组件 + Hooks
- 优先使用 Server Components (Next.js 14)
- 文件命名: kebab-case (如: `user-profile.tsx`)
- 组件命名: PascalCase (如: `UserProfile`)

### 2. 样式规范
- 使用 Tailwind CSS 工具类
- 精确匹配 Figma spacing tokens
- 优先使用 Tailwind 预定义值
- 需要时使用 arbitrary values: `p-[18px]`
- 响应式设计: mobile-first 方法

### 3. 组件开发
- 使用 shadcn/ui 组件作为基础
- 组件必须可复用和可组合
- Props 使用 TypeScript 接口定义
- 添加 JSDoc 注释说明组件用途

### 4. 布局系统
- 使用 Flexbox 和 Grid
- 匹配 Figma Auto Layout 设置
- 支持响应式断点:
  - sm: 640px (mobile)
  - md: 768px (tablet)
  - lg: 1024px (desktop)
  - xl: 1280px (large desktop)

### 5. 颜色系统
使用项目设计令牌:
```typescript
// 主色调
primary: '#3B82F6' (blue-500)
secondary: '#8B5CF6' (violet-500)
accent: '#10B981' (emerald-500)

// 中性色
background: '#FFFFFF' (白天) / '#0F172A' (夜间)
foreground: '#0F172A' (白天) / '#F1F5F9' (夜间)
muted: '#F1F5F9' / '#1E293B'
border: '#E2E8F0' / '#334155'
```

### 6. 间距系统
- 基础单位: 4px
- 常用间距: 4, 8, 12, 16, 24, 32, 48, 64px
- Tailwind classes: p-1 (4px), p-2 (8px), p-4 (16px), 等

### 7. 圆角系统
- sm: 0.375rem (6px)
- md: 0.5rem (8px)
- lg: 0.75rem (12px)
- xl: 1rem (16px)
- 2xl: 1.5rem (24px)

### 8. 字体系统
- 主字体: Inter (sans-serif)
- 等宽字体: JetBrains Mono (代码显示)
- 字重:
  - Regular: 400
  - Medium: 500
  - Semibold: 600
  - Bold: 700

### 9. 图标使用
- 优先使用 Lucide React
- 尺寸标准: 16px (sm), 20px (md), 24px (lg)
- 颜色: 继承父元素 text color

### 10. 交互状态
必须包含以下状态:
- Default: 默认状态
- Hover: 鼠标悬停
- Active: 激活/按下
- Disabled: 禁用
- Loading: 加载中
- Focus: 键盘焦点 (无障碍)

### 11. 动画与过渡
- 使用 Tailwind transition utilities
- 标准过渡时间: 150ms (快), 300ms (标准)
- 缓动函数: ease-in-out
- 复杂动画使用 Framer Motion

### 12. 无障碍性 (A11y)
- 所有交互元素添加 aria-label
- 使用语义化 HTML
- 键盘导航支持
- 颜色对比度 WCAG AA 标准

### 13. 性能优化
- 使用 React.memo 优化渲染
- 图片使用 Next.js Image 组件
- 懒加载非关键组件
- 避免不必要的 re-renders

### 14. 代码组织
```
src/
├── components/
│   ├── ui/           # shadcn/ui 基础组件
│   ├── layout/       # 布局组件
│   └── features/     # 功能组件
├── lib/
│   ├── utils.ts      # 工具函数
│   └── constants.ts  # 常量定义
└── types/            # TypeScript 类型定义
```

### 15. 提示词响应规则
当收到 Figma 设计时:
1. 分析设计的层次结构
2. 识别可复用组件
3. 确定响应式断点需求
4. 生成完整的 TypeScript 组件
5. 包含完整的 Props 类型定义
6. 添加使用示例和注释
7. 考虑边缘情况和错误状态

### 16. 组件模板
```typescript
/**
 * ComponentName - 简短描述
 *
 * @example
 * <ComponentName prop1="value" />
 */

import { cn } from '@/lib/utils'

interface ComponentNameProps {
  // Props 定义
}

export function ComponentName({
  // 解构 props
}: ComponentNameProps) {
  return (
    <div className={cn(
      // Tailwind classes
    )}>
      {/* 组件内容 */}
    </div>
  )
}
```

### 17. 特殊要求
- 深色模式: 使用 `dark:` 前缀
- 数据可视化: 使用 Recharts
- 表格: 使用 TanStack Table
- 表单: 使用 React Hook Form + Zod
- 日期选择: 使用 date-fns

### 18. Git 提交规范
- feat: 新功能
- fix: 修复
- style: 样式调整
- refactor: 重构
- docs: 文档更新

---

## 使用示例

当用户提供 Figma 设计链接时,自动:
1. 解析设计的布局和样式
2. 匹配项目的设计系统
3. 生成符合上述规则的代码
4. 包含响应式和无障碍支持
5. 提供使用说明和最佳实践建议
